@using SharedLibrary.Models;
@using SharedLibrary.Services;

@inject IWeatherForecastService WeatherForecastService

<PageTitle>Weather forecast | Telerik</PageTitle>

<h1>Weather forecast - gRPC and Telerik</h1>

<p>This component demonstrates fetching data from the server - gRPC and Telerik.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
    }
    else
    {
        // GrpcTelerikGridWebAssemblyPrerendered Breaks with FilterMode
        //Removing FilterMode allows this to work with gRPC
    <TelerikGrid Data="@forecasts"
                     Pageable="true"
                     Sortable="true"
                     FilterMode="@GridFilterMode.FilterRow">
        <GridColumns>
            <GridColumn Field="@(nameof(WeatherForecast.Date))" Title="Date" />
            <GridColumn Field="@(nameof(WeatherForecast.TemperatureC))" Title="Temp. (C)" />
            <GridColumn Field="@(nameof(WeatherForecast.TemperatureF))" Title="Temp. (F)" />
            <GridColumn Field="@(nameof(WeatherForecast.Summary))" Title="Summary" />
        </GridColumns>
    </TelerikGrid>
    }

@code {
    private List<WeatherForecast>? forecasts;

    protected override async Task OnInitializedAsync()
    {
        forecasts = await WeatherForecastService.GetWeatherForecastsAsync();
    }
}
